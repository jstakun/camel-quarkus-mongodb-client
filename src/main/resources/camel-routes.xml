<?xml version="1.0" encoding="UTF-8"?>
<routes id="DBClient" xmlns="http://camel.apache.org/schema/spring"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://camel.apache.org/schema/spring https://camel.apache.org/schema/spring/camel-spring-3.18.0.xsd">
    <route id="Put to cache">
        <from uri="direct:putToCache"/>
        <doTry>
        	<log loggingLevel="INFO" message="Inserting document to collection ${header.cid} ..."/>
        	<convertBodyTo type="java.lang.String"/>
        	<to uri="direct:insertRecord"/>
        	<log loggingLevel="INFO" message="Done"/>
        	<setBody>
            	<simple>{"_id": "${header.CamelMongoOid}"}</simple>
        	</setBody>
        	<removeHeaders pattern="*"/>
        	<doCatch>
            	 <exception>java.lang.Exception</exception>
                 <to uri="direct:logError"/>
            </doCatch>
        </doTry>
    </route>
    <route id="Insert record to collection">
        <from uri="direct:insertRecord"/>
        <recipientList>
            <simple>mongodb:camelMongoClient?database={{quarkus.mongodb.database}}&amp;collection=${header.cid}&amp;operation=save</simple>
        </recipientList>
        <log loggingLevel="INFO" message="Document with id ${header.CamelMongoOid} inserted to collection ${header.cid}."/>
    </route>
    <route id="Get from cache">
        <from uri="direct:getFromCache"/>
        <doTry>
        	<validate>
            	<simple>${header.limit} range '1..{{app.batch.limit}}'</simple>
        	</validate>
        	<log loggingLevel="INFO" message="Get all from cache ${header.cid} with limit ${header.limit}"/>
        	<setHeader name="CamelMongoDbSortBy">
            	<!--  descending by _id -->
            	<constant>{"_id" : -1}</constant>
        	</setHeader>
        	<setHeader name="CamelMongoDbLimit">
            	<simple>${header.limit}</simple>
        	</setHeader>
        	<setHeader name="CamelMongoDbBatchSize">
            	<constant>{{app.batch.limit}}</constant>
        	</setHeader>
        	<recipientList>
            	<simple>mongodb:camelMongoClient?database={{quarkus.mongodb.database}}&amp;collection=${header.cid}&amp;operation=findAll</simple>
        	</recipientList>
        	<log loggingLevel="INFO" message="Done. Found ${body.size()} documents."/>
        	<to uri="direct:processOutput"/>
	        <doCatch>
            	 <exception>java.lang.Exception</exception>
                 <to uri="direct:logError"/>
            </doCatch>
        </doTry>
    </route>
    <route id="Get from cache by id">
        <from uri="direct:getFromCacheById"/>
        <doTry>
        	<log loggingLevel="INFO" message="Get from cache ${header.cid} document with id ${header.oid}"/>
        	<setBody>
        		<simple>${header.oid}</simple>
        	</setBody>
        	<choice>
        		<when>
        		    <simple>${body.length} == 24</simple>
        			<convertBodyTo type="org.bson.types.ObjectId"/> 	
        		</when>
        	</choice>
        	<recipientList>
            	<simple>mongodb:camelMongoClient?database={{quarkus.mongodb.database}}&amp;collection=${header.cid}&amp;operation=findById</simple>
        	</recipientList>
        	<to uri="direct:processOutput"/>
	        <doCatch>
            	 <exception>java.lang.Exception</exception>
                 <to uri="direct:logError"/>
            </doCatch>
        </doTry>
    </route>
    <route id="Get by query from cache">
        <from uri="direct:getByQueryFromCache"/>
        <doTry>
        	<validate>
            	<simple>${header.limit} range '1..{{app.batch.limit}}'</simple>
        	</validate>
        	<setHeader name="CamelMongoDbSortBy">
            	<simple>{"_id" : -1}</simple>
        	</setHeader>
        	<setHeader name="CamelMongoDbLimit">
            	<simple>${header.limit}</simple>
        	</setHeader>
        	<setHeader name="CamelMongoDbCriteria">
            	<simple>${body}</simple>
        	</setHeader>
        	<log loggingLevel="INFO" message="Get from cache ${header.cid} by ${body} with limit ${header.limit}"/>
        	<recipientList>
            	<simple>mongodb:camelMongoClient?database={{quarkus.mongodb.database}}&amp;collection=${header.cid}&amp;operation=findAll</simple>
        	</recipientList>
        	<log loggingLevel="INFO" message="Done. Found ${body.size()} documents."/>
        	<to uri="direct:processOutput"/>
            <doCatch>
            	 <exception>java.lang.Exception</exception>
                 <to uri="direct:logError"/>
            </doCatch>
        </doTry> 	
    </route>
    <route id="Aggregate from cache">
        <from uri="direct:aggregateFromCache"/>
        <doTry>
        	<log loggingLevel="INFO" message="Endpoint ${header.CamelHttpUri}: Aggregate from cache ${header.cid} by ..."/>
       	    <convertBodyTo type="java.lang.String"/>
        	<recipientList>
            	<simple>mongodb:camelMongoClient?database={{quarkus.mongodb.database}}&amp;collection=${header.cid}&amp;operation=aggregate</simple>
        	</recipientList>
        	<log loggingLevel="INFO" message="Endpoint ${header.CamelHttpUri}: Done. Found ${body.size()} documents."/>
            <choice>
            	 <when>
             		<simple>${body.size()} == 1</simple>
             		<setBody>
             			<simple>${body[0]}</simple>
             		</setBody>
        		</when>
        		<when>
             		<simple>${body.size()} == 0 &amp;&amp; ${header.default} != null</simple>
             		<setBody>
             			<simple>${header.default}</simple>
             		</setBody>
             		<convertBodyTo type="org.bson.Document"/>
        		</when>	
            </choice>        	
        	<to uri="direct:processOutput"/>
            <doCatch>
            	 <exception>java.lang.Exception</exception>
                 <to uri="direct:logError"/>
            </doCatch>
        </doTry> 	
    </route>
    <route id="Get db stats">
        <from uri="direct:getDbStats"/>
        <doTry>
        	<to uri="mongodb:camelMongoClient?database={{quarkus.mongodb.database}}&amp;operation=getDbStats"/>
        	<to uri="direct:processOutput"/>
    		<doCatch>
            	 <exception>java.lang.Exception</exception>
                 <to uri="direct:logError"/>
            </doCatch>
        </doTry>    
    </route>
    <route id="Delete from cache">
        <from uri="direct:deleteFromCache"/>
        <doTry>
        	<log loggingLevel="INFO" message="Delete from collection ${header.cid} documents matching ${header.property}: ${header.value}"/>
        	<setBody>
            	<simple>{"${header.property}" : "${header.value}"}</simple>
        	</setBody>
        	<recipientList>
            	<simple>mongodb:camelMongoClient?database={{quarkus.mongodb.database}}&amp;collection=${header.cid}&amp;operation=remove</simple>
        	</recipientList>
        	<setBody>
            	<simple>{"count": ${header.CamelMongoDbRecordsAffected}}</simple>
        	</setBody>
        	<removeHeaders pattern="*"/>
            <doCatch>
            	 <exception>java.lang.Exception</exception>
                 <to uri="direct:logError"/>
            </doCatch>
        </doTry>	
    </route>
    <route id="Log error">
        <from uri="direct:logError"/>
        <log loggingLevel="ERROR" message="Operation failed with exception: ${exception.stacktrace}"/>
        <setBody>
            <simple>{"error" : "Operation failed"}</simple>
        </setBody>
        <removeHeaders pattern="*"/>
        <setHeader name="CamelHttpResponseCode">
            <constant>500</constant>
        </setHeader>
    </route>
    <route id="Process output">
        <from uri="direct:processOutput"/>
        <marshal>
            <json id="json-po" library="Jackson"/>
        </marshal>
        <choice> 
        	<when>
            	<simple>${headers.accept-encoding} contains 'gzip'</simple>
				<marshal>
					<gzipDeflater id="gzip"/>
				</marshal>
				<setHeader name="content-encoding">
            		<constant>gzip</constant>
        		</setHeader>
        		<removeHeaders pattern="accept*"/>
        	</when>
			<otherwise> 
        		<removeHeaders pattern="*"/>
			</otherwise>
		</choice>
    </route>

    <!--  RH Summit --> 

    <route id="Register user">
        <from uri="direct:registerUser"/>
        <doTry>
        	<unmarshal>
            	<json id="json-re" library="Jackson" unmarshalType="org.redhat.Registration"/>
        	</unmarshal>
        	<validate>
            	<simple>${body.email} != null &amp;&amp; ${body.email.length} > 0</simple>
        	</validate>
        	<validate>
            	<simple>${body.nick} != null &amp;&amp; ${body.nick.length} > 0</simple>
        	</validate>
        	<setHeader name="x-redhat-email">
            	<simple>${body.email}</simple>
        	</setHeader>
        	<setHeader name="x-redhat-nick">
            	<simple>${body.nick}</simple>
        	</setHeader>
        	<setBody>
            	 <simple>{"email": { $regex: /${header.x-redhat-email}/i }}</simple>
        	</setBody>
        	<recipientList>
            	 <simple>mongodb:camelMongoClient?database={{quarkus.mongodb.database}}&amp;collection=${header.cid}&amp;operation=findOneByQuery</simple>
        	</recipientList>
        	<choice>
            	 <when>
             		<simple>${header.CamelMongoDbResultTotalSize} == 1</simple>
             		<process ref="RegistrationProcessor"/>
             		<choice>
             			<when>
             		    	<simple>${header.CamelHttpResponseCode} == 200</simple>
             				<to uri="direct:insertRecord"/>
             				<setBody>
            					<simple>{"id": "${header.CamelMongoOid}"}</simple>
        					</setBody>
             			</when>
             		</choice>	
        		</when>	
            	<otherwise>
		        	<setHeader name="CamelHttpResponseCode">
        		    	<constant>404</constant>
        			</setHeader>
        			<log loggingLevel="ERROR" message="Email ${header.x-redhat-email} not found!"/>
             	</otherwise>			  
        	</choice>
        	<removeHeaders pattern="x-redhat*"/>	
        	<removeHeader name="cid"/>
        	<doCatch>
            	 <exception>java.lang.Exception</exception>
                 <to uri="direct:logError"/>
            </doCatch>
        </doTry>   
    </route>
    <route id="Get top labels">
        <from uri="direct:getTopLabels"/>
        <doTry>
            <setBody>
 				<simple>labels</simple>           		
            </setBody> 
            <recipientList>
            	<simple>mongodb:camelMongoClient?database={{quarkus.mongodb.database}}&amp;collection={{app.mongodb.default.stats.collection}}&amp;operation=findById</simple>
        	</recipientList>
            <setBody>
            	<simple>${body.get("stats")}</simple>
            </setBody>
            <to uri="direct:processOutput"/>
    		<doCatch>
            	 <exception>java.lang.Exception</exception>
                 <to uri="direct:logError"/>
            </doCatch>
        </doTry>    
    </route>
    <route id="Get top users">
        <from uri="direct:getTopUsers"/>
        <doTry>
            <setBody>
 				<simple>users</simple>           		
            </setBody> 
            <recipientList>
            	<simple>mongodb:camelMongoClient?database={{quarkus.mongodb.database}}&amp;collection={{app.mongodb.default.stats.collection}}&amp;operation=findById</simple>
        	</recipientList>
            <setBody>
            	<simple>${body.get("stats")}</simple>
            </setBody>
            <to uri="direct:processOutput"/>
            <doCatch>
            	 <exception>java.lang.Exception</exception>
                 <to uri="direct:logError"/>
            </doCatch>
        </doTry>    
    </route> 
    <route id="Get labels by users">
        <from uri="direct:getLabelsByUser"/>
        <doTry>
            <setHeader name="cid">
 				<simple>{{app.mongodb.default.collection}}</simple>           		
            </setHeader>
            <setHeader name="default">
 				<simple>{"_id": "${header.uid}", "labels":[], "total": 0, "sum": 0}</simple>           		
            </setHeader> 
            <setBody>
        	    <simple>[{ "$match": { "type": "response", "uid": "${header.uid}" } }, { "$unwind": "$content.detections" }, { "$match": { "content.detections.score": { $gt: {{app.recognition.percent}} } } }, { "$group": { "_id": "$content.detections.label", "count": { $sum: 1 } } }, { "$sort" : { count : -1 } }, { "$group": { "_id": "${header.uid}", labels: { $push: "$$ROOT" } } }, { $addFields: { total : { $size: "$labels" },  sum: { $sum: "$labels.count" } } }]</simple>
        	</setBody>
         	<to uri="direct:aggregateFromCache"/>
    		<doCatch>
            	 <exception>java.lang.Exception</exception>
                 <to uri="direct:logError"/>
            </doCatch>
        </doTry>        
    </route>    
    <route id="Generate users stats">
       <from uri="master:rh-summit-app:timer://generate-users-stats?period={{app.user.stats.period}}"/>
       <to uri="direct:generateUsersStats"/>
    </route>
    <route id="Generate users stats instant">
		<from uri="direct:generateUsersStatsInstant"/>
		<doTry>    
		    <to uri="direct:generateUsersStats"/>
            <to uri="direct:getTopUsers"/>
    		<doCatch>
            	 <exception>java.lang.Exception</exception>
                 <to uri="direct:logError"/>
            </doCatch>
        </doTry>    
	</route>
    <route id="Generate users stats internal">
       <from uri="direct:generateUsersStats"/>   
       <doTry>
            <setHeader name="cid">
 				<simple>{{app.mongodb.default.collection}}</simple>           		
            </setHeader> 
            <setHeader name="CamelHttpUri">
 				<simple>/generate-users-stats</simple>           		
            </setHeader>   
            <setBody>
                <simple>[{ "$match": { "type": "response", "$expr": { "$eq": [ { "$strLenCP":"$uid" }, 24 ] } } }, { "$unwind": "$content.detections" }, { "$match": { "content.detections.score": { $gt: {{app.recognition.percent}} } } }, { "$group": { "_id": "$uid", labels: {$addToSet: "$content.detections.label"} } }, { "$project": { "_id" : 1, count: { "$size": "$labels" } } }, { "$sort" : { count : -1 } }, { $limit : {{app.user.stats.limit}} }, { "$lookup": { from: "users", let: { "userId": { "$toObjectId": "$_id" } }, pipeline: [ { $match: { $expr: { $eq: [ "$_id", "$$userId" ] } } } ], as: "user" } }, { "$project": { "_id" : 1, count: 1, "nick" :  { $first: "$user.nick" }, "email" :  { $first: "$user.email" } } }, { "$project": { "_id" : 1, count: 1, "nick": { $ifNull: [ "$nick", "unknown" ] }, "email": { $ifNull: [ "$email", "unknown" ] } } }]</simple>
        	</setBody>
         	<to uri="direct:aggregateFromCache"/>
            <setBody>
         	    <simple>{"_id": "users", "stats": ${body}}</simple>
            </setBody>	    
            <setHeader name="cid">
 				<simple>{{app.mongodb.default.stats.collection}}</simple>           		
            </setHeader>
            <to uri="direct:putToCache"/>
    		<doCatch>
            	 <exception>java.lang.Exception</exception>
                 <to uri="direct:logError"/>
            </doCatch>
        </doTry>    
    </route>
    <route id="Generate labels stats">
       <from uri="master:rh-summit-app:timer://generate-labels-stats?period={{app.label.stats.period}}"/>
       <to uri="direct:generateLabelsStats"/>
    </route>
    <route id="Generate labels stats instant">
		<from uri="direct:generateLabelsStatsInstant"/>
		<doTry>    
		    <to uri="direct:generateLabelsStats"/>
            <to uri="direct:getTopLabels"/>
    		<doCatch>
            	 <exception>java.lang.Exception</exception>
                 <to uri="direct:logError"/>
            </doCatch>
        </doTry>    
	</route>    
    <route id="Generate labels stats internal">
       <from uri="direct:generateLabelsStats"/>   
       <doTry>
            <setHeader name="cid">
 				<simple>{{app.mongodb.default.collection}}</simple>           		
            </setHeader>
            <setHeader name="CamelHttpUri">
 				<simple>/generate-labels-stats</simple>           		
            </setHeader>   
            <setBody>
        		<simple>[{ "$match": { "type": "response" } }, { "$unwind": "$content.detections" }, { "$match": { "content.detections.score": { $gt: {{app.recognition.percent}} } } }, { "$group": { "_id": "$content.detections.label", "total": { $sum: 1 } } }, { "$sort" : { total : -1 } }, { $limit : {{app.label.stats.limit}} }]</simple>
        	</setBody>
         	<to uri="direct:aggregateFromCache"/>
            <setBody>
         	    <simple>{"_id": "labels", "stats": ${body}}</simple>
            </setBody>	    
            <setHeader name="cid">
 				<simple>{{app.mongodb.default.stats.collection}}</simple>           		
            </setHeader>
            <to uri="direct:putToCache"/>
    		<doCatch>
            	 <exception>java.lang.Exception</exception>
                 <to uri="direct:logError"/>
            </doCatch>
        </doTry>    
    </route>    
</routes>
